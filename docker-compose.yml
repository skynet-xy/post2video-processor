services:
  app:
    build: .
    ports:
      - "8000:8000"
    volumes:
      - ./generated:/app/generated
      - ./assets:/app/assets
      - ./app:/app/app
      - ./keys:/app/keys
    environment:
      - PYTHONUNBUFFERED=1
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
  worker:
    build: .
    volumes:
      - ./generated:/app/generated
      - ./assets:/app/assets
      - ./app:/app/app
      - ./keys:/app/keys
    command: python -u job_worker.py
    environment:
      - PYTHONUNBUFFERED=1
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
  postgres:
    image: postgres:17-alpine
    environment:
      POSTGRES_USER: app
      POSTGRES_DB: app
      POSTGRES_PASSWORD: 1
    ports:
      - "5432:5432"
    volumes:
      - ./database/volumes/postgres/17/data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app"]
      interval: 5s
      timeout: 5s
      retries: 5
  atlas:
    image: arigaio/atlas
    command: >
      schema apply
      -u "postgres://app:1@postgres:5432/app?search_path=public&sslmode=disable"
      --to "file://public.sql"
      --dev-url "postgres://app:1@postgres:5432/app?search_path=atlas_dev&sslmode=disable"
      --auto-approve
    volumes:
      - ./database/schema:/schema
    depends_on:
      postgres:
        condition: service_healthy
    working_dir: /schema
  atlas-triggers:
    image: postgres:17-alpine
    volumes:
      - ./database/schema:/schema
    command: psql "postgresql://app:1@postgres:5432/app" -f /schema/triggers.sql
    depends_on:
      atlas:
        condition: service_completed_successfully
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    command: redis-server
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5